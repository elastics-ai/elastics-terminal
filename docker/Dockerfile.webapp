# Multi-stage Dockerfile for Volatility Terminal Web App

# Stage 1: Build Next.js application
FROM node:20-alpine AS frontend-builder

WORKDIR /app

# Copy package files
COPY volatility-web/package*.json ./

# Install dependencies including plotly (using legacy peer deps for React 19 compatibility)
RUN npm install --legacy-peer-deps && npm install react-plotly.js plotly.js --save --legacy-peer-deps

# Copy all source code and config files
COPY volatility-web/ ./

# Ensure all necessary files are present for the build
RUN ls -la && ls -la app/

# Build the Next.js app
RUN npm run build

# List build output for debugging
RUN ls -la .next/static/css/ || echo "No CSS directory found"

# Stage 2: Python backend with Next.js frontend
FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js 20 (matching the builder stage)
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs && \
    rm -rf /var/lib/apt/lists/*

# Copy Python requirements and elastics-options
COPY requirements.txt .
COPY volatility-web/requirements.txt ./web-requirements.txt
COPY elastics-options/ ./elastics-options/
RUN pip install --no-cache-dir -r requirements.txt
RUN pip install --no-cache-dir -r web-requirements.txt

# Copy Python source code
COPY src/ ./src/
COPY scripts/ ./scripts/

# Copy web app API server
COPY volatility-web/api_server.py ./volatility-web/

# Copy the standalone folder from builder
COPY --from=frontend-builder /app/.next/standalone ./volatility-web/
COPY --from=frontend-builder /app/.next/static ./volatility-web/.next/static
COPY --from=frontend-builder /app/public ./volatility-web/public

# IMPORTANT: Next.js standalone needs public directory at the same level as .next
# Copy public directory to the correct location for standalone Next.js
COPY --from=frontend-builder /app/public ./volatility-web/public

# Verify the build output
RUN echo "Checking build output:" && \
    ls -la volatility-web/ && \
    ls -la volatility-web/.next/ && \
    ls -la volatility-web/.next/static/ || echo "static dir not found"

# Create necessary directories
RUN mkdir -p /data /tmp

# Create startup script
RUN echo '#!/bin/bash\n\
set -e\n\
echo "Starting Volatility Terminal Web App..."\n\
\n\
# Function to handle shutdown\n\
shutdown() {\n\
    echo "Shutting down services..."\n\
    kill $WEBSOCKET_PID $API_PID $NEXTJS_PID 2>/dev/null || true\n\
    exit 0\n\
}\n\
\n\
# Set up signal handlers\n\
trap shutdown SIGTERM SIGINT\n\
\n\
# Start WebSocket server in background\n\
echo "Starting WebSocket server on port 8765..."\n\
if python scripts/run_combined_filter.py &; then\n\
    WEBSOCKET_PID=$!\n\
    echo "WebSocket server started with PID $WEBSOCKET_PID"\n\
else\n\
    echo "Failed to start WebSocket server, but continuing..."\n\
    WEBSOCKET_PID=""\n\
fi\n\
\n\
# Wait for WebSocket server to start\n\
sleep 3\n\
\n\
# Start API server in background\n\
echo "Starting API server on port 8000..."\n\
cd volatility-web || { echo "Failed to cd into volatility-web"; exit 1; }\n\
if python api_server.py &; then\n\
    API_PID=$!\n\
    echo "API server started with PID $API_PID"\n\
    cd ..\n\
else\n\
    echo "Failed to start API server"\n\
    cat api_server.log 2>/dev/null || echo "No API server log available"\n\
    exit 1\n\
fi\n\
\n\
# Wait for API server to start\n\
sleep 3\n\
\n\
# Verify API server is responding\n\
echo "Checking API server health..."\n\
for i in {1..5}; do\n\
    if curl -f http://localhost:8000/api/health >/dev/null 2>&1; then\n\
        echo "API server is responding"\n\
        break\n\
    fi\n\
    echo "Waiting for API server... ($i/5)"\n\
    sleep 1\n\
done\n\
\n\
# Start Next.js production server using the standalone server\n\
echo "Starting web app on port 3000..."\n\
cd volatility-web || { echo "Failed to cd into volatility-web for Next.js"; exit 1; }\n\
if HOSTNAME=0.0.0.0 PORT=3000 node server.js &; then\n\
    NEXTJS_PID=$!\n\
    echo "Next.js server started with PID $NEXTJS_PID"\n\
    cd ..\n\
else\n\
    echo "Failed to start Next.js server"\n\
    ls -la || echo "Directory listing failed"\n\
    exit 1\n\
fi\n\
\n\
# Wait a bit then verify all services\n\
sleep 2\n\
echo "All services started successfully"\n\
\n\
# Wait for all processes\n\
wait $API_PID $NEXTJS_PID\n\
' > /app/start-webapp.sh && chmod +x /app/start-webapp.sh

# Create volume for database
VOLUME ["/data"]

# Expose ports
EXPOSE 3000 8000 8765

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV DB_PATH=/data/volatility_filter.db
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:3000 && curl -f http://localhost:8000/api/health || exit 1

# Run the web app
CMD ["/app/start-webapp.sh"]
