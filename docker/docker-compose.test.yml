version: '3.8'

services:
  # Test database
  test-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: test_volatility
    tmpfs:
      - /var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Backend API tests
  backend-test:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: >
      sh -c "
        pip install -r requirements.txt &&
        python -m pytest tests/ -v --cov=src
      "
    environment:
      - DB_PATH=/tmp/test_volatility.db
      - ANTHROPIC_API_KEY=test-key
      - TESTING=true
    volumes:
      - ../src:/app/src
      - ../tests:/app/tests
      - ../requirements.txt:/app/requirements.txt
      - ../pytest.ini:/app/pytest.ini
    depends_on:
      test-db:
        condition: service_healthy

  # Frontend tests
  frontend-test:
    build:
      context: ../volatility-web
      dockerfile: ../docker/Dockerfile.webapp
    command: >
      sh -c "
        npm install &&
        npm test -- --watchAll=false --coverage
      "
    environment:
      - CI=true
      - NODE_ENV=test
    volumes:
      - ../volatility-web:/app
      - /app/node_modules
      - /app/.next

  # E2E tests with both services running
  e2e-test:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: >
      sh -c "
        pip install -r requirements.txt &&
        python -m pytest tests/e2e/ -v -m e2e
      "
    environment:
      - DB_PATH=/tmp/test_volatility.db
      - ANTHROPIC_API_KEY=test-key
      - API_URL=http://backend:8000
      - WS_URL=ws://websocket:8765
      - TESTING=true
    volumes:
      - ../src:/app/src
      - ../tests:/app/tests
      - ../requirements.txt:/app/requirements.txt
      - ../pytest.ini:/app/pytest.ini
    depends_on:
      - backend
      - frontend
      - websocket
    networks:
      - test-network

  # Backend service for E2E tests
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: python volatility-web/api_server.py
    environment:
      - DB_PATH=/data/test_volatility.db
      - ANTHROPIC_API_KEY=test-key
      - TESTING=true
    volumes:
      - test-data:/data
      - ../src:/app/src
      - ../volatility-web:/app/volatility-web
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  # WebSocket service for E2E tests
  websocket:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: python -m src.volatility_filter.websocket_server
    environment:
      - DB_PATH=/data/test_volatility.db
      - TESTING=true
    volumes:
      - test-data:/data
      - ../src:/app/src
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "python", "-c", "import websocket; ws = websocket.create_connection('ws://localhost:8765'); ws.close()"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Frontend service for E2E tests
  frontend:
    build:
      context: ../volatility-web
      dockerfile: ../docker/Dockerfile.webapp
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NEXT_PUBLIC_WS_URL=ws://websocket:8765
    networks:
      - test-network
    depends_on:
      backend:
        condition: service_healthy
      websocket:
        condition: service_healthy
  
  # Playwright E2E tests
  playwright-test:
    build:
      context: ../volatility-web
      dockerfile: ../docker/Dockerfile.playwright
    command: >
      sh -c "
        npm install &&
        npx playwright install --with-deps &&
        npx playwright test
      "
    environment:
      - CI=true
      - BASE_URL=http://frontend:3000
      - API_URL=http://backend:8000
      - WS_URL=ws://websocket:8765
    volumes:
      - ../volatility-web:/app
      - /app/node_modules
      - playwright-results:/app/test-results
    depends_on:
      - backend
      - frontend
      - websocket
    networks:
      - test-network

volumes:
  test-data:
  playwright-results:

networks:
  test-network:
    driver: bridge