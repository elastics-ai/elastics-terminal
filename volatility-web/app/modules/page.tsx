'use client'

import React, { useState } from 'react'
import { AppLayout } from '@/components/layout/app-layout'
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import { modulesAPI } from '@/lib/api'
import { ModuleTile } from '@/components/modules/ModuleTile'
import { ModuleDetail } from '@/components/modules/ModuleDetail'
import { Search, Filter, Star, BarChart3, Loader2 } from 'lucide-react'

interface Module {
  id: number
  title: string
  description: string | null
  sql_query: string
  query_type: string
  tables_used: string[] | null
  execution_count: number
  avg_execution_time_ms: number
  last_executed_at: string
  is_favorite: boolean
  first_conversation_id: number
}

export default function ModulesPage() {
  const queryClient = useQueryClient()
  const [selectedModuleId, setSelectedModuleId] = useState<number | null>(null)
  const [searchQuery, setSearchQuery] = useState('')
  const [queryTypeFilter, setQueryTypeFilter] = useState<string>('')
  const [favoritesOnly, setFavoritesOnly] = useState(false)
  const [page, setPage] = useState(0)
  const limit = 12

  // Fetch modules
  const { data: modulesData, isLoading } = useQuery({
    queryKey: ['modules', searchQuery, queryTypeFilter, favoritesOnly, page],
    queryFn: () => modulesAPI.getModules({
      limit,
      offset: page * limit,
      search: searchQuery || undefined,
      query_type: queryTypeFilter || undefined,
      favorites_only: favoritesOnly || undefined,
    }),
  })

  // Fetch stats
  const { data: statsData } = useQuery({
    queryKey: ['modules-stats'],
    queryFn: () => modulesAPI.getStats(),
  })

  // Update module mutation
  const updateModuleMutation = useMutation({
    mutationFn: ({ id, ...data }: { id: number } & Parameters<typeof modulesAPI.updateModule>[1]) => 
      modulesAPI.updateModule(id, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['modules'] })
    },
  })

  const modules = modulesData?.modules || []
  const totalModules = modulesData?.total || 0
  const totalPages = Math.ceil(totalModules / limit)

  const handleToggleFavorite = (moduleId: number, currentState: boolean) => {
    updateModuleMutation.mutate({
      id: moduleId,
      is_favorite: !currentState,
    })
  }

  return (
    <AppLayout>
      <div className="flex h-full">
        {/* Main Content */}
        <div className="flex-1 p-6 overflow-auto">
          {/* Header */}
          <div className="mb-6">
            <h1 className="text-2xl font-normal mb-2">Modules Gallery</h1>
            <p className="text-gray-500">Reusable SQL queries generated by AI</p>
          </div>

          {/* Stats */}
          {statsData && (
            <div className="grid grid-cols-4 gap-4 mb-6">
              <div className="bg-gray-900 rounded-lg p-4">
                <div className="text-sm text-gray-500 mb-1">Total Modules</div>
                <div className="text-2xl font-medium">{statsData.total_modules || 0}</div>
              </div>
              <div className="bg-gray-900 rounded-lg p-4">
                <div className="text-sm text-gray-500 mb-1">Total Executions</div>
                <div className="text-2xl font-medium">{statsData.total_executions || 0}</div>
              </div>
              <div className="bg-gray-900 rounded-lg p-4">
                <div className="text-sm text-gray-500 mb-1">Avg Execution Time</div>
                <div className="text-2xl font-medium">
                  {Math.round(statsData.avg_execution_time || 0)}ms
                </div>
              </div>
              <div className="bg-gray-900 rounded-lg p-4">
                <div className="text-sm text-gray-500 mb-1">Favorites</div>
                <div className="text-2xl font-medium">{statsData.favorite_count || 0}</div>
              </div>
            </div>
          )}

          {/* Filters */}
          <div className="flex items-center gap-4 mb-6">
            {/* Search */}
            <div className="flex-1 relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-500" />
              <input
                type="text"
                placeholder="Search modules..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-full pl-10 pr-4 py-2 bg-gray-900 rounded-lg border border-gray-800 focus:border-primary focus:outline-none"
              />
            </div>

            {/* Query Type Filter */}
            <select
              value={queryTypeFilter}
              onChange={(e) => setQueryTypeFilter(e.target.value)}
              className="px-4 py-2 bg-gray-900 rounded-lg border border-gray-800 focus:border-primary focus:outline-none"
            >
              <option value="">All Types</option>
              <option value="SELECT">SELECT</option>
              <option value="INSERT">INSERT</option>
              <option value="UPDATE">UPDATE</option>
              <option value="DELETE">DELETE</option>
            </select>

            {/* Favorites Toggle */}
            <button
              onClick={() => setFavoritesOnly(!favoritesOnly)}
              className={`flex items-center gap-2 px-4 py-2 rounded-lg border transition-colors ${
                favoritesOnly 
                  ? 'bg-yellow-900/20 border-yellow-800 text-yellow-500' 
                  : 'bg-gray-900 border-gray-800 hover:border-gray-700'
              }`}
            >
              <Star className="w-4 h-4" />
              Favorites
            </button>
          </div>

          {/* Modules Grid */}
          {isLoading ? (
            <div className="flex items-center justify-center h-64">
              <Loader2 className="w-6 h-6 animate-spin text-gray-500" />
            </div>
          ) : modules.length === 0 ? (
            <div className="text-center py-12">
              <BarChart3 className="w-12 h-12 mx-auto mb-4 text-gray-600" />
              <p className="text-gray-500">No modules found</p>
              {searchQuery && (
                <p className="text-sm text-gray-600 mt-2">
                  Try adjusting your search criteria
                </p>
              )}
            </div>
          ) : (
            <>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
                {modules.map((module) => (
                  <ModuleTile
                    key={module.id}
                    module={module}
                    onClick={() => setSelectedModuleId(module.id)}
                    onToggleFavorite={() => handleToggleFavorite(module.id, module.is_favorite)}
                  />
                ))}
              </div>

              {/* Pagination */}
              {totalPages > 1 && (
                <div className="flex items-center justify-center gap-2">
                  <button
                    onClick={() => setPage(Math.max(0, page - 1))}
                    disabled={page === 0}
                    className="px-3 py-1 rounded bg-gray-800 hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    Previous
                  </button>
                  <span className="text-sm text-gray-500">
                    Page {page + 1} of {totalPages}
                  </span>
                  <button
                    onClick={() => setPage(Math.min(totalPages - 1, page + 1))}
                    disabled={page === totalPages - 1}
                    className="px-3 py-1 rounded bg-gray-800 hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    Next
                  </button>
                </div>
              )}
            </>
          )}
        </div>

        {/* Module Detail Sidebar */}
        {selectedModuleId && (
          <ModuleDetail
            moduleId={selectedModuleId}
            onClose={() => setSelectedModuleId(null)}
            onUpdate={() => queryClient.invalidateQueries({ queryKey: ['modules'] })}
          />
        )}
      </div>
    </AppLayout>
  )
}